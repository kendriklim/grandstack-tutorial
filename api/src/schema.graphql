# These type definitions have been generated from your Neo4j database.

# Here are some Neo4j specific scalars that you can use to map to native Neo4j types:
# scalar Point
scalar Date
scalar DateTime
scalar BigInt

# Edit these GraphQL type definitions below to change your GraphQL API
# You can add custom logic defined with Cypher using the @cypher GraphQL schema directive
# You can refer to the docs at https://grandstack.io

type Query {
  propertyCount: Int @cypher(statement: "MATCH (p:Property) RETURN COUNT(p)")
  cityValues: [CityValue]
    @cypher(
      statement: """
      MATCH (c:City) <-[:IN_CITY]-(p:Property)
      WHERE EXISTS(p.TotalValue)
      WITH c.name AS city, avg(p.TotalValue) AS average
      RETURN {city: city, average: average} AS obj
      """
    )
}

type Query {
  propertyForPoint(latitude: Float, longitude: Float): [Property]
    @cypher(
      statement: """
      MATCH (p:Property) WHERE size(p.polygon) >= 4
      AND spatial.algo.withinPolygon(Point({latitude:$latitude, longitude:$longitude}), p.polygon)
      RETURN p
      """
    )
}

type CityValue {
  city: String
  average: Float
}

extend type City {
  averageValue: Float
    @cypher(
      statement: """
      MATCH (this)<-[:IN_CITY]-(p:Property)
      RETURN avg(p.TotalValue)
      """
    )
}

type City {
  _id: BigInt!
  name: String!
  propertys: [Property] @relationship(type: "IN_CITY", direction: IN)
}

type Subdivision {
  _id: BigInt!
  name: String!
  propertys: [Property] @relationship(type: "IN_SUBDIVISION", direction: IN)
}

type Neighborhood {
  _id: BigInt!
  name: String!
  propertys: [Property] @relationship(type: "IN_NEIGHBORHOOD", direction: IN)
}

type Appraisal {
  _id: BigInt!
  building: Int
  land: Int
  method: String
  property_id: String!
  total: Int
  year: Int!
  propertys: [Property] @relationship(type: "HAS_APPRAISAL", direction: IN)
}

type Property {
  _id: BigInt!
  AddressL_1: String
  AddressLin: String
  Assessment: String
  COUNTYCD: Int!
  CareOfTaxp: String
  Certificat: String
  CityStateZ: String
  Continuous: Float!
  CountyAbbr: String!
  CountyName: String!
  DbaName: String
  FallowAcre: Float!
  FarmsiteAc: Float!
  ForestAcre: Float!
  GISAcres: Float!
  GrazingAcr: Float!
  IrrigatedA: Float!
  LegalDescr: String
  LevyDistri: String
  NonQualAcr: Float!
  OwnerAdd_1: String
  OwnerAdd_2: String
  OwnerAddre: String
  OwnerCity: String
  OwnerName: String
  OwnerState: String
  OwnerZipCo: String
  PropType: String
  PropertyID: Int!
  Range: String
  Section: String
  Shape_Area: Float!
  Shape_Leng: Float!
  Subdivisio: String
  TaxYear: Int!
  TotalAcres: Float!
  TotalBuild: Int!
  TotalLandV: Int!
  TotalValue: Int!
  Township: String
  WildHayAcr: Float!
  acres: Float
  address: String
  bedrooms: Int
  category: String
  full_baths: Int
  half_baths: Int
  heating: String
  id: String!
  location: Point
  lot_size: Int
  polygon: [Point]
  sqft: Int
  style: String
  year_built: Int
  in_city: [City] @relationship(type: "IN_CITY", direction: OUT)
  in_subdivision: [Subdivision]
    @relationship(type: "IN_SUBDIVISION", direction: OUT)
  in_neighborhood: [Neighborhood]
    @relationship(type: "IN_NEIGHBORHOOD", direction: OUT)
  has_appraisal: [Appraisal]
    @relationship(type: "HAS_APPRAISAL", direction: OUT)
  photos: [Photo] @ignore
}

type Photo {
  url: String
}

type Query {
  orderCount: Int
    @cypher(statement: "match (o:orderID) return count(distinct o)")
  expOrders: [expOrder]
    @cypher(
      statement: """
      match (s:data1)-[]->(o:orderID)
      return {total_cost: (s.Shipment_cost + s.Warehouse_cost), orderId: o.name} AS obj
      """
    )
}

type expOrder {
  total_cost: Float
  orderId: String
}

type date {
  _id: Int!
  name: String!
  date_with_price: [data3!]! @relationship(type: "CONSIST_OF", direction: OUT)
  date_with_product: [data4!]! @relationship(type: "CONSIST_OF", direction: OUT)
}

type data4 {
  _id: Int!
  Raw_material: String!
}

type data1 {
  _id: Int!
  Order_det: String!
  Procurement_date: String!
  Received_date: String!
  Rejection_rate: Float!
  Shipment_cost: Float!
  Shipped_from: String!
  Supplier_name: String!
  Warehouse_cost: Float!
  supllier_with_order: [orderID!]!
    @relationship(type: "CONSIST_OF", direction: OUT)
}

type orderID {
  _id: Int!
  name: String!
  Quantity: Int!
  order_with_product: [data2!]!
    @relationship(type: "CONSIST_OF", direction: OUT)
}

type data2 {
  _id: Int!
  Raw_material: String!
}

type data3 {
  _id: Int!
  Price: Float!
}
